#!/usr/bin/perl
##############################################################################
#
# Script:   bcvi
#
# The 'Back-Channel vim' tool works with SSH to allow commands which are run
# on an SSH server to invoke processes back on the originating SSH client
# machine.
#
# Use 'bcvi --help' for the documentation
#
# Copyright (c) 2007-2010 Grant McLean <grantm@cpan.org.nz>
#

use strict;
use warnings;

$BCVI::VERSION   = '3.00';

%BCVI::class_map = (
    base   => 'BCVI',
    client => 'BCVI::Client',
    server => 'BCVI::Server',
);

BCVI::load_libs();

BCVI::base_class()->process_command_line();

exit;

##############################################################################
# This package implements some common functionality required by both the
# client and the server.
##############################################################################

package BCVI;

use Pod::Usage;
use Getopt::Long qw(GetOptions);

sub version      { return $BCVI::VERSION;           }
sub base_class   { return $BCVI::class_map{base};   }
sub client_class { return $BCVI::class_map{client}; }
sub server_class { return $BCVI::class_map{server}; }


sub new {
    my $class = shift;

    return bless { @_ }, $class;
}


sub load_libs {
    return;
}


sub process_command_line {
    my $class = shift;

    my $opt = $class->option_defaults();
    my @cfg = $class->getopt_config();

    if(!GetOptions($opt, @cfg)) {
        pod2usage(-exitval => 1,  -verbose => 0);
    }

    pod2usage(-exitstatus => 0, -verbose => 2) if($opt->{'help'});

    my $handler = $opt->{listener}
                ? $class->server_class
                : $class->client_class;

    $handler->new(%$opt)->dispatch(@main::ARGV);
}


sub option_defaults {
    return {
        port    => ($< * 10 + 9),
        command => 'vi',
    };
}


sub getopt_config {
    return (
        'add-aliases',
        'command|c=s',
        'help|?',
        'install',
        'listener|l',
        'no-path-xlate|n',
        'port|p=s',
        'unpack-term',
        'version|v',
        'wrap-ssh|s',
    );
}

##############################################################################
# The BCVI::Client class implements the command-line UI and the client side
# of the BCVI protocol.  You can use inheritance to customise the behaviour
# of this class.
##############################################################################

package BCVI::Client;

BEGIN { @BCVI::Client::ISA = qw( BCVI ); }


##############################################################################
# The BCVI::Server class implements the server side of the BCVI protocol.  You
# can use inheritance to customise the behaviour of this class.
##############################################################################

package BCVI::Server;

BEGIN { @BCVI::Server::ISA = qw( BCVI ); }


__END__

=head1 NAME

bcvi - Back-channel vi, proxy commands back over ssh

=head1 SYNOPSIS

  bcvi [options] [<files>]

  Options:

   -l|--listener        start in listener mode
   -p|--port <port>     listener port number
   -c|--command <cmnd>  command to send over back-channel
   -n|--no-path-xlate   skip translation of args from relative to absolute
   -s|--wrap-ssh        pass all args after -- to ssh
      --unpack-term     unpack the overloaded TERM variable
      --install <host>  copy bcvi to <host>
      --add-aliases     install bcvi into bash startup files
   -?|--help            detailed help message

=head1 DESCRIPTION

This utility works with SSH to allow commands run on the SSH server to be
'proxied' back to the SSH client machine.  For example:

=over 4

=item *

user F<sue> establishes an SSH connection from her workstation to a server
named F<pluto> and runs the command C<bcvi .bashrc>

=item *

bcvi tunnels the details back to sue's workstation which then invokes the
command C<gvim scp://pluto//home/sue/.bashrc>

=item *

the result is that sue gets a responsive GUI editor running on her local
machine, but editing a file on the remote machine

=back


=head1 OPTIONS

=over 4

=item B<--listener> (alias: -l)

Start a (background) listener process.

=item B<< --port <port> >> (alias: -p)

Port number to listen on (default is user_id * 10 + 9).

=item B<< --command <cmnd> >> (alias: -c)

Use C<cmnd> as the command to send over the back-channel (default: vi).
Recognised commands are:

=over 4

=item vi

Invokes C<gvim> on the remote file - after translating the host+path to
an scp URI.

=item scpd

Uses C<scp> to copy the file to the calling user's F<~/Desktop>.

=item notify

Uses the desktop notification protocol to display a message on the calling
user's desktop.

=back

=item B<< --no-path-xlate >> (alias -n)

When invoking a command use this option to indicate that the arguments are not
filenames and the translation of relative pathnames to absolute should be
skipped.

=item B<< --install <host> >>

Copy the C<bcvi> script to the C<$HOME/bin> directory on the specified host
and then remotely invoke it with the C<--add-aliases> option.

=item B<< --add-aliases >>

Edit the bash startup script to add (or update) the required command aliases
for bcvi.

=item B<< --unpack-term >>

This option is intended for use from a F<.profile> script.  It outputs a
snippet to shell script to be passed to C<eval> in the calling shell.

The C<bcvi> script overloads the TERM environment variable (which is
propagated by ssh) to 'smuggle' config data to the remote shell.

=item B<-?>

Display this documentation.

=back

=head1 USING BCVI

You'll need to start a listener process on your workstation (perhaps from
your window manager session startup?

  bcvi -l &

To ssh to a server with tunnelling enabled:

  bcvi --wrap-ssh -- hostname

To enable bcvi on all ssh connections:

  alias ssh="bcvi --wrap-ssh --"

On a target server, you'll need to unpack the overloaded TERM variable:

  test -n "$(which bcvi)" && eval "$(bcvi --unpack-term)"

To use vi over the back-channel:

  bcvi filename

You might want to set up command aliases:

  test -n "${BCVI_CONF}"  && alias vi="bcvi"
  test -n "${BCVI_CONF}"  && alias bcp="bcvi -c scpd"

=head1 COPYRIGHT

Copyright 2007-2010 Grant McLean E<lt>grantm@cpan.orgE<gt>

This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.



=cut


